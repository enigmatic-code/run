#!/usr/bin/env -S python3 -u
###############################################################################
#
# File:         run
# RCS:          $Header: $
# Description:  run a file using the command specified on the first line
# Author:       Jim Randell
# Created:      Tue Oct 14 12:52:59 2016
# Modified:     Thu Aug  3 21:17:10 2023 (Jim Randell) jim.randell@gmail.com
# Language:     Python
# Package:      N/A
# Status:       Experimental (Do Not Distribute)
#
# (c) Copyright 2017, Jim Randell, all rights reserved.
#
###############################################################################
# -*- mode: Python; python-indent-offset: 2; -*-

# run a file according to the shebang line:
#
# % run <file>
#
# is the same as:
#
# % ./<file>
#
# if the file is executable, but also works if it isn't

from __future__ import print_function

import sys
import shlex
import subprocess
import os

def fprint(f, *args, **kw):
  print(*args, file=f, **kw)

def usage():
  fprint(sys.stdout, "run [<opts>] <file> [<args>]")
  fprint(sys.stdout, "runs <file> with command specified in the shebang line")
  fprint(sys.stdout, "additional <args> are added to the command")
  fprint(sys.stdout, "valid opts are: (defaults from $RUN_OPT)")
  fprint(sys.stdout, "  -v = verbose, output the command before running it (to stderr)")
  fprint(sys.stdout, "  -x = like -v, but doesn't execute the command")
  fprint(sys.stdout, "  -q = turn off verbose")
  fprint(sys.stdout, "  -t = output elapsed time of the command execution (to stderr)")
  fprint(sys.stdout, "  -R = redirect stderr to stdout")
  fprint(sys.stdout, "  -C[<dir>] = cd to <dir> (or directory of <file>)")
  fprint(sys.stdout, "  -s[<file>] = send <file> to stdin of command")
  fprint(sys.stdout, "  -i[<cmd>] = use <cmd> instead of shebang")
  fprint(sys.stdout, "  -n = notify on completion")
  fprint(sys.stdout, "  -c = caffeinate (macOS only)")
  fprint(sys.stdout, "  -h = output (this) usage information")
  fprint(sys.stdout)
  exit()

# parse options, and determine the file to run
cmd = None
verbose = 0
timing = 0
nox = 0
redir = 0
prompt = 0
page = None
chdir = None
stdin = None
beep = None
caffeinate = 0
shebang = "#!"
argv = sys.argv[1:]

def get_options(argv):
  global cmd, verbose, timing, nox, redir, chdir, stdin, beep, caffeinate, prompt
  while argv:
    v = argv.pop(0)
    if v == '--':
      break
    elif v == '-v':
      verbose = 1
    elif v == '-t':
      timing = 1
    elif v == '-R':
      redir = 1
    elif v == '-x':
      nox = 1
    elif v == '-q':
      verbose = 0
    elif v == '-p':
      prompt = 1
    elif v.startswith('-n'):
      beep = v[2:]
    elif v == '-c':
      caffeinate = 1
    elif v.startswith('-C'):
      chdir = v[2:]
    elif v.startswith('-s'):
      stdin = v[2:]
    elif v.startswith('-i'):
      cmd = v[2:]
    elif v.startswith('-'):
      usage()
    else:
      argv.insert(0, v)
      break
  if nox or prompt: verbose = 1

if not argv:
  usage()
else:
  # add arguments from ${RUN_OPT}
  opts = os.getenv("RUN_OPT")
  if opts is not None:
    argv = opts.split() + argv

# but "--" in args ignores previous arguments
while True:
  try:
    i = argv.index('--')
  except ValueError:
    break
  if all(argv[j].startswith('-') for j in range(i)): argv = argv[i + 1:]

get_options(argv)

path = os.path.abspath(argv[0])

if cmd is None:
  # read the first line from the file
  # #!<cmd> ...
  with open(path, 'r') as fh:
    s = next(fh)
    # find the #! part
    i = s.find(shebang)
    if i != -1:
      # extract the command (as a string)
      cmd = s[i + len(shebang):].strip()
    elif os.path.isfile(path) and os.access(path, os.X_OK):
      # if there is no interpreter, but the file is executable
      cmd = ""
    else:
      raise SystemExit("run: interpreter not found")

# replace @var in cmd
replace = ('@' in cmd)
if replace:
  import re
  def fn(x):
    if x == 'path': return path
    if x == 'args': return ' '.join(argv[1:])
    if x == 'dir': return os.path.dirname(path)
    if x == 'file': return os.path.basename(path)
    if x == 'name': return os.path.basename(os.path.splitext(path)[0])
    if x == 'ext': return os.path.splitext(path)[1]
    if x in os.environ: return os.environ[x]
    fprint(sys.stderr, "run: variable @{x} not found".format(x=x))
    return '@' + x
  cmd = re.sub(r'@(\w+)', (lambda m: fn(m.group(1))), cmd)

cmd = shlex.split(cmd)
get_options(cmd)

if not replace:
  if stdin is None: cmd.append(path)
  cmd.extend(argv[1:])

if chdir is not None and not chdir: chdir = os.path.dirname(path)
if stdin is not None and not stdin: stdin = path

# quote argument x
# (Python 3 has shlex.quote())
def quote(x):
  plain = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_+@:.,/='
  (s, q) = (list(), ('' if x else '"'))
  for c in x:
    if c in plain:
      s.append(c)
    else:
      s.extend(('\\', c))
      q = '"'
  return q + (''.join(s)) + q


if cmd:

  if redir: sys.stderr = sys.stdout

  if caffeinate: cmd.insert(0, 'caffeinate')

  if verbose and chdir: fprint(sys.stdout, ">>> chdir " + quote(chdir))
  if verbose: fprint(sys.stderr, ">>> " + ' '.join(quote(x) for x in cmd) + (" [stdin=" + stdin + "]" if stdin else ""))

  if prompt:
    if sys.version_info[0] > 2: raw_input = input
    s = raw_input(">>> proceed? [Y/n] > ").strip()
    if s.lower().startswith("n"): exit()

  timer = None
  if timing:
    import time
    _timer = None
    # choose an elapsed time function
    for fn in [ 'perf_counter', ('clock' if sys.platform == 'win32' else 'time')]:
      _timer = getattr(time, fn, None)
      if _timer is not None: break
    timer = _timer()

  # run the command
  if not nox:
    if stdin:
      with open(stdin, 'r') as fh:
        subprocess.call(cmd, cwd=chdir, stdin=fh)
    else:
      subprocess.call(cmd, cwd=chdir)

  if timer:
    t = _timer() - timer
    msg = "[{name}] elapsed time: {t:.7f}s".format(t=t, name=os.path.basename(argv[0]))
    u = 's'
    if t < 1.0: (t, u) = (1000 * t, 'ms')
    if t < 1.0: (t, u) = (1000 * t, 'us')
    msg += " ({t:.2f}{u})".format(t=t, u=u)
    fprint(sys.stderr, msg)

  if beep is not None:
    if beep:
      # run it as a command
      beep = shlex.split(beep)
      subprocess.call(beep)
    else:
      fprint(sys.stderr, "\007", end="")
