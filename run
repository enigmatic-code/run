#!/usr/bin/env python -u
###############################################################################
#
# File:         run
# RCS:          $Header: $
# Description:  run a file using the command specified on the first line
# Author:       Jim Randell
# Created:      Tue Oct 14 12:52:59 2016
# Modified:     Fri Feb 23 17:05:43 2018 (Jim Randell) jim.randell@gmail.com
# Language:     Python
# Package:      N/A
# Status:       Experimental (Do Not Distribute)
#
# (c) Copyright 2017, Jim Randell, all rights reserved.
#
###############################################################################
# -*- mode: Python; py-indent-offset: 2; -*-

# run a file according to the shebang line:
#
# % run <file>
#
# is the same as:
#
# % ./<file>
#
# if the file is executable, but also works if it isn't

from __future__ import print_function

import sys
import shlex
import subprocess
import os

def fprint(f, *args, **kw):
  print(*args, file=f, **kw)

def usage():
  fprint(sys.stdout, "run [<opts>] <file> [<args>]")
  fprint(sys.stdout, "runs <file> with command specified in the shebang line")
  fprint(sys.stdout, "additional <args> are added to the command")
  fprint(sys.stdout, "valid opts are:")
  fprint(sys.stdout, "  -v = verbose, output the command before running it (to stdout")
  fprint(sys.stdout, "  -x = like -v, but doesn't execute the command")
  fprint(sys.stdout, "  -t = output elapsed time of the command execution (to stderr)")
  fprint(sys.stdout, "  -C[<dir>] = cd to <dir> (or directory of <file>")
  fprint(sys.stdout, "  -s[<file>] = send <file> to stdin of command")
  fprint(sys.stdout, "  -h = output (this) usage information")
  fprint(sys.stdout)
  exit()

# parse options, and determine the file to run
verbose = 0
timing = 0
nox = 0
chdir = None
stdin = None
shebang = "#!"
argv = sys.argv[1:]

def get_options(argv):
  global verbose, timing, nox, chdir, stdin
  while argv:
    if argv[0] == '-v':
      verbose = 1
    elif argv[0] == '-t':
      timing = 1
    elif argv[0] == '-x':
      nox = 1
      verbose = 1
    elif argv[0].startswith('-C'):
      chdir = argv[0][2:]
    elif argv[0].startswith('-s'):
      stdin = argv[0][2:]
    elif argv[0].startswith('-'):
      usage()
    else:
      break
    argv.pop(0)

get_options(argv)

# read the first line from the file
# #!<cmd> ...
cmd = None
path = os.path.abspath(argv[0])
with open(path, 'r') as fh:
  for s in fh:
    # find the #! part
    i = s.find(shebang)
    assert i != -1, "interpreter not found"
    # extract the command (as a string)
    cmd = s[i + len(shebang):].strip()
    cmd = shlex.split(cmd)
    get_options(cmd)
    # turn it into a list: <cmd> <file> <arg> ...
    if stdin is None: cmd.append(path)
    cmd.extend(argv[1:])
    break

if chdir is not None and not chdir: chdir = os.path.dirname(path)
if stdin is not None and not stdin: stdin = path

# quote argument x
# (Python 3 has shlex.quote())
def quote(x):
  plain = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789-_+@:.,/'
  (s, q) = (list(), ('' if x else '"'))
  for c in x:
    if c in plain:
      s.append(c)
    else:
      s.extend(('\\', c))
      q = '"'
  return q + (''.join(s)) + q


if cmd:

  if verbose and chdir: fprint(sys.stdout, ">>> chdir " + quote(chdir))
  if verbose: fprint(sys.stdout, ">>> " + ' '.join(quote(x) for x in cmd) + (" [stdin=" + stdin + "]" if stdin else ""))

  timer = None
  if timing:
    import time
    try:
      _timer = time.perf_counter
    except AttributeError:
      if sys.platform == 'win32':
        _timer = time.clock
      else:
        _timer = time.time
    timer = _timer()

  # run the command
  if not nox:
    if stdin:
      with open(stdin, 'r') as fh:
        subprocess.call(cmd, cwd=chdir, stdin=fh)
    else:
      subprocess.call(cmd, cwd=chdir)

  if timer:
    t = _timer() - timer
    msg = "[{name}] elapsed time: {t:.7f}s".format(t=t, name=os.path.basename(argv[0]))
    u = 's'
    if t < 1.0: (t, u) = (1000 * t, 'ms')
    if t < 1.0: (t, u) = (1000 * t, 'us')
    msg += " ({t:.2f}{u})".format(t=t, u=u)
    fprint(sys.stderr, msg)

#
# possible future enhancements:
#
# * we could consider just calling the file if there's no interpreter and it's executable
#
# * allow some way of mentioning {file}, {args} in the interpreter (otherwise add them to the end)
#
